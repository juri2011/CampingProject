<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.campingga.mapper.OrderListMapper">

	<!-- SQL 문 info(주문정보) 정의 
		orderlist_no as orderlist_no, / 주문번호를 가져옴
		l.mem_id as mem_id, / 회원 ID를 가져옴
		totprice, / 주문의 총가격을 가져옴
		datatus, / 배송 상태를 가져옴
		wqybill_num as waybill_num, / 운송장 번호를 가져옴
		parcel_cd as parcel_cd, / 송장 코드를 가져옴
		DATE_FORMAT(l.regiDAte,'%Y%m%d') as regiDateStr, / 주문등록날짜를 YYYYMMDD형식의 문자열로 변환하여 가져옴.
		ROW_NUMBER() over(ORDER BY l.regiDate desc) AS rownum, / 행번호 - 주문의 등록날짜를 내림차순으로 정렬하고, 각 행에 순차적인 번호 부여
		count(1) over() AS totalCount / 총 주문개수를 가져옴 
	 -->
	<sql id="info">
		orderlist_no as orderlist_no, 
		l.mem_id as mem_id, 
		totprice, 
		dstatus,
		waybill_num as waybill_num,
		parcel_cd as parcel_cd,
		DATE_FORMAT(l.regiDate,'%Y%m%d') as regiDateStr,
		ROW_NUMBER() over(ORDER BY l.regiDate desc) AS rownum,
		count(1) over() AS totalCount 			
	</sql>


	<!-- *주문 정보 삽입 쿼리 
		INSERT INTO orderlist (mem_id, totprice) VALUES
		(#{mem_id}, #{totprice}) : orderlist 테이블에 최원 ID와 총 가격을 삽입.
		삽입된 주문 번호는 자동 생성되며, useGeneratedKeys="true"와 keyProperty="orderlist_no"를
		통해 자동 생성된 주문 번호를 반환	
	 -->
	<insert id="insertOrder"
		parameterType="com.campingga.domain.OrderList" useGeneratedKeys="true"
		keyProperty="orderlist_no">
		INSERT INTO orderlist (mem_id, totprice) VALUES
		(#{mem_id}, #{totprice})
	</insert>

	<!-- *주문 결제 정보 삽입 쿼리 
		INSERT INTO order_payment(order_no, imp_uid) VALUES
		(#{order_no}, #{imp_uid}): order_payment 테이블에 주문 번호와 결제 정보를 삽입.	
	-->
	<insert id="insertOrderPayment"
		parameterType="com.campingga.domain.OrderPayment">
		INSERT INTO order_payment(order_no, imp_uid) VALUES
		(#{order_no}, #{imp_uid})
	</insert>

	<!-- *주문 배송 주소 정보 삽입 쿼리 
		order_addess 테이블에 주문 번호와 배송 주소 저보를 삽입
	 -->
	<insert id="insertOrderAddress"
		parameterType="com.campingga.domain.OrderAddress">
		INSERT INTO order_address(order_no, `name`, phone, addr1, addr2,
		memo)
		VALUES (#{order_no}, #{name}, #{phone}, #{addr1}, #{addr2}, #{memo})
	</insert>
	
	<!-- WHERE 절을 위한 SQL 문 조각 정의 -->
	<sql id="where">
	</sql>

	<!-- *주문 목록 조회 쿼리 
		앞서 정의한 SQL조각인 info세어 주문정보를 가져옴. 페이징 처리를 위해 rownum을 사용하고,
		특정 페이지 데이터만 가져오도록 BETWEEN및 ORDER BY구문 사용
	-->
	<select id="selectOrderList" parameterType="com.campingga.domain.Common" resultType="com.campingga.domain.OrderList">
		select t.* 
		from (
			select
				<include refid="info"/> 
			from orderlist l
		) t
		where rownum BETWEEN (#{section}-1)*10*100+(#{pageNum}-1)*10+1 AND (#{section}-1)*100+#{pageNum}*10
		order by rownum		
	</select>
	
	<!-- *주문 ID 조회 쿼리 
		주문id를 기반으로 주문 정보를 조회. 회원 이름,전화버호, 배송주소등과 함께 주문 상태를 가져옴.
	-->
	<select id="selectOrderId" resultType="java.util.HashMap">
		select
			name,
			phone,
			a.addr1,
			addr2 as Daddr,
			memo,
			DATE_FORMAT(update_date,'%m/%d') as parcelDate,
			(case WEEKDAY(update_date)
			    when '0' then '월'
			    when '1' then '화'
			    when '2' then '수'
			    when '3' then '목'
			    when '4' then '금'
			    when '5' then '토'
			    when '6' then '일'
		    end) as weekDay,
		    case
			    when l.dstatus= '1' then '배송전'
			    when l.dstatus= '2' then '출고완료'
			    when l.dstatus= '3' then '배송중'
			   	when l.dstatus= '4' then '배송완료'
			    else '배송정보사용불가'
			end as dstatusStr,
		    
			<include refid="info"/> 
		from orderlist l
		INNER JOIN order_address a ON(l.orderlist_no = a.order_no)
		INNER JOIN cart c ON(l.orderlist_no = c.ordernum)
		where orderlist_no = #{orderlistNo}
		  and c.goods_no = #{gno}
	</select>
	
	<!-- *주문 목록 삽입 쿼리 
		주문 목록에 회원 ID,총 가격, 배송 상태를 삽입.
	-->
	<insert id="insertOrderList" parameterType="com.campingga.domain.OrderList">
		insert into orderlist(mem_id,totprice,dstatus)
		values(#{memId},#{topprice},#{dstatus})
	</insert>

	<!-- *주문 목록 업데이트 쿼리 
		총 가격과 배송 상태를 수정. 주문번호를 기반으로 업데이트 수행
	-->
	<update id="updateOrderList" parameterType="com.campingga.domain.OrderList">
		update orderlist
			set topprice = #{topprice},
			dstatus = #{dstatus}
		where orderlist_no = #{orderlistNo}
	</update>

	<!-- *주문 목록 삭제 쿼리 
		주문 번호를 기반으로 해당 주문 삭제
	-->
	<delete id="deleteOrderList" parameterType="com.campingga.domain.OrderList">
		delete from orderlist 
		where orderlist_no = #{orderlistNo}
	</delete>
	
	<!-- 송장 데이터 업데이트 쿼리 
		운송장 번호와 송장 코드를 주문 번호를 기반으로 업데이트.
	-->
	<update id="updateWaybillData" parameterType="com.campingga.domain.OrderList">
		update orderlist
			set waybill_num = #{waybillNum},
			parcel_cd = #{parcelCd}
		where orderlist_no = #{orderlistNo}
	</update>

	

</mapper>